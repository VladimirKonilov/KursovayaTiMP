/**
 * @file UserInterface.h
 * @brief Заголовочный файл, определяющий класс UserInterface, который обрабатывает параметры командной строки.
 * 
 * Этот файл содержит определение класса UserInterface, который отвечает за анализ параметров командной строки, 
 * таких как адрес сервера, порт, файлы и путь к конфигурации.
 * 
 * @author Конилов В.В.
 * @date 2024-12-12
 */

#ifndef USER_INTERFACE_H
#define USER_INTERFACE_H

#include <string>
#include <iostream>
#include <stdexcept>
#include <cstdlib>  // Для getenv
#include <getopt.h> // Для парсинга командной строки

/**
 * @class UserInterface
 * @brief Класс, который отвечает за обработку командной строки и параметров.
 * 
 * Класс UserInterface анализирует переданные в командной строке аргументы, такие как адрес сервера, 
 * порт, входной и выходной файлы, а также путь к конфигурационному файлу. Класс также обрабатывает ошибки 
 * и предоставляет функцию для вывода справки.
 */
class UserInterface {
public:
    /**
     * @brief Сетевой адрес сервера.
     */
    std::string serverAddress;  /**< Адрес сервера */

    /**
     * @brief Порт сервера.
     */
    int serverPort;             /**< Порт для соединения с сервером */

    /**
     * @brief Имя файла с исходными данными.
     */
    std::string inputFile;      /**< Путь к входному файлу */

    /**
     * @brief Имя файла для сохранения результатов.
     */
    std::string outputFile;     /**< Путь к файлу, в который будут сохранены результаты */

    /**
     * @brief Имя конфигурационного файла, содержащего логин и пароль.
     */
    std::string configFile;     /**< Путь к конфигурационному файлу с логином и паролем */

    /**
     * @brief Конструктор класса UserInterface.
     * 
     * Этот конструктор обрабатывает параметры командной строки и сохраняет их в соответствующие поля класса.
     * В случае ошибки (например, если обязательные параметры не заданы), вызывается метод handleError.
     * 
     * @param argc Количество аргументов командной строки.
     * @param argv Массив строк с аргументами командной строки.
     * 
     * @throws std::exit(1) Если обязательные параметры отсутствуют или присутствуют некорректные аргументы.
     */
    UserInterface(int argc, char** argv);

    /**
     * @brief Выводит справочную информацию по использованию программы.
     * 
     * Этот метод выводит описание всех доступных опций командной строки.
     */
    static void printHelp();

    /**
     * @brief Обрабатывает ошибку, если параметры командной строки некорректны.
     * 
     * Этот метод выводит сообщение об ошибке и завершает выполнение программы с кодом ошибки 1.
     * 
     * @param message Сообщение об ошибке, которое будет выведено.
     */
    static void handleError(const std::string& message);
};

#endif // USER_INTERFACE_H
